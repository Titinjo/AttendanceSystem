@model AttendanceSystem.Models.Student

@{
    ViewData["Title"] = "Add Student";
}

<h2>Add Student</h2>

<div id="statusMessage">🔌 Waiting for Arduino connection...</div>

<div id="studentForm" class="student-form" style="">
    <form method="post" action="@Url.Action("AddStudent", "Student")">
        <div class="form-group">
            <label for="name">Student Name:</label>
            <input type="text" id="name" name="name" required />
        </div>

        <div class="form-group">
            <label for="fingerprintId" id="fingerprintId">Fingerprint ID:</label>
            <div id="fingerprintIdForm">
            <input type="text" id="fingerprintIdInput" name="fingerprintId" readonly />
            <button type="button" class="btn btn-enroll" id="enrollButton">📲 Enroll</button>
            </div>
        </div>

        <button type="submit" class="btn add-btn"><i class="fa-solid fa-plus"></i> Add Student</button>
    </form>
</div>

<div id="serialConsole">
    <h3>🖥️ Serial Console</h3>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const studentForm = document.getElementById("studentForm");
        const statusMessage = document.getElementById("statusMessage");
        const fingerprintInput = document.getElementById("fingerprintIdInput");

            const connection = new signalR.HubConnectionBuilder()
        .withUrl("/ArduinoHub") // <-- must match your `MapHub` route
        .build();


        // Initial check to see if Arduino is already connected
        fetch("/Student/IsArduinoConnected")
            .then(res => res.json())
            .then(data => {
                if (data.connected) {
                    studentForm.style.display = "block";
                    statusMessage.textContent = "✅ Fingerprint Sensor Connected!";
                } else {
                    studentForm.style.display = "none";
                    statusMessage.textContent = "🔌 Waiting for Arduino connection...";
                }
            })
            .catch(err => console.error("❌ Error checking Arduino status:", err));

        // Enroll trigger
        document.getElementById("enrollButton").addEventListener("click", function () {
            fetch("/Student/TriggerEnrollment", { method: "POST" })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        alert("❌ Error: " + data.message);
                    }
                })
                .catch(err => console.error("❌ Error sending enroll command:", err));
        });

        // SignalR Events
        connection.on("ReceiveSerialLog", function (message) {
            console.log("📥 Serial Message:", message);

            if (message.includes("ArduinoFingerPrintSensorReady")) {
                studentForm.style.display = "block";
                statusMessage.textContent = "✅ Fingerprint Sensor Connected!";
            }

            if (message.startsWith("ID ") && /^\d+$/.test(message.substring(3))) {
                const fingerprintId = message.substring(3);
                fingerprintInput.value = fingerprintId;
                alert("✅ Fingerprint Enrolled! ID: " + fingerprintId);
            }

            const logDiv = document.getElementById("serialConsole");
            const logEntry = document.createElement("div");
            logEntry.textContent = message;
            logDiv.appendChild(logEntry);
            logDiv.scrollTop = logDiv.scrollHeight;
        });

        connection.start().catch(err => console.error("❌ SignalR Error:", err));

        connection.onclose(error => {
            console.error("🔌 SignalR connection closed:", error);
            statusMessage.textContent = "❌ Lost connection to Arduino.";
            studentForm.style.display = "none";
        });
    </script>
}
