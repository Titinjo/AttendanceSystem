@model IEnumerable<Attendance>

@{
    ViewData["Title"] = "Attendance Dashboard";
}
<head>
<style>
    main {
        padding: 20px;
    }

    h2, h3 {
        color: #f3f4f6;
        margin-bottom: 20px;
    }

    form {
        margin-bottom: 30px;
    }

    label {
        display: block;
        font-weight: 500;
        margin-bottom: 6px;
        color: #d1d5db;
    }

    input[type="date"],
    select {
        width: 100%;
        max-width: 300px;
        padding: 10px 12px;
        border-radius: 6px;
        border: none;
        background-color: #1f1f1f;
        color: #f3f3f3;
        margin-bottom: 15px;
    }

        input[type="date"]:focus,
        select:focus {
            outline: 2px solid #3b82f6;
        }

    .btn {
        padding: 10px 18px;
        border-radius: 6px;
        border: none;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.2s ease, transform 0.2s ease;
    }

    .btn-primary {
        background-color: #2563eb;
        color: #fff;
    }

        .btn-primary:hover {
            background-color: #1d4ed8;
            transform: scale(1.03);
        }

    .btn-success {
        background-color: #16a34a;
        color: #fff;
    }

        .btn-success:hover {
            background-color: #15803d;
            transform: scale(1.03);
        }

    .btn-danger {
        background-color: #dc2626;
        color: #fff;
    }

        .btn-danger:hover {
            background-color: #b91c1c;
            transform: scale(1.03);
        }

    .table {
        width: 100%;
        border-collapse: collapse;
        background: rgba(255, 255, 255, 0.05);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
        border-radius: 12px;
        overflow: hidden;
    }

        .table th,
        .table td {
            padding: 14px 16px;
            border-bottom: 1px solid #2a2a2a;
            text-align: left;
        }

        .table thead {
            background-color: #1f2937;
        }

        .table th {
            color: #93c5fd;
        }

        .table tbody tr:hover {
            background-color: #1e293b;
        }

    .serial-console {
        background: #000;
        color: #00ff00;
        padding: 15px;
        font-family: monospace;
        font-size: 0.95rem;
        margin-top: 30px;
        border-radius: 8px;
        height: 200px;
        overflow-y: auto;
        box-shadow: 0 4px 15px rgba(0,0,0,0.5);
    }

    .filter-section,
    .export-section {
        margin-bottom: 40px;
        background: rgba(255, 255, 255, 0.03);
        padding: 20px;
        border-radius: 10px;
    }

    .form-inline > * {
        margin-right: 16px;
    }

    .form-inline {
        display: flex;
        flex-wrap: wrap;
        align-items: flex-end;
    }
</style>
</head>

<h2>Attendance Dashboard for @ViewBag.SubjectName</h2>

<!-- Filter Form -->
<div class="filter-section">
    <form asp-action="AttendanceDashboard" method="get" class="form-inline">
        <input type="hidden" name="subjectId" value="@ViewBag.SubjectId" />

        <div>
            <label>Filter by Date:</label>
            <select name="date">
                <option value="">-- Select Date --</option>
                @foreach (var lessonDate in (List<DateTime>)ViewBag.LessonDates)
                {
                    <option value="@lessonDate.ToString("yyyy-MM-dd")">
                        @lessonDate.ToString("dddd, dd MMM yyyy")
                    </option>
                }
            </select>
        </div>

        <button type="submit" class="btn btn-primary">Apply Filter</button>
    </form>
</div>

<hr />

<!-- Attendance Table -->
@if (Model.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Student Name</th>
                <th>Fingerprint ID</th>
                <th>Attendance Status</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in Model)
            {
                <tr>
                    <td>@record.Student.Name</td>
                    <td>@record.Student.FingerprintID</td>
                    <td>@(record.Present ? "✅ Present" : "❌ Absent")</td>
                    <td>@record.LessonDate.ToString("dd/MM/yyyy")</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Export Section -->
    <div class="export-section">
        <h3>📦 Export Attendance Data</h3>
        <form asp-action="ExportAttendanceToExcel" method="get" class="form-inline">
            <input type="hidden" name="subjectId" value="@ViewBag.SubjectId" />

            <div>
                <label>Select Date:</label>
                <select name="date">
                    <option value="">-- Select Date --</option>
                    @foreach (var lessonDate in (List<DateTime>)ViewBag.LessonDates)
                    {
                        <option value="@lessonDate.ToString("yyyy-MM-dd")">
                            @lessonDate.ToString("dddd, dd MMM yyyy")
                        </option>
                    }
                </select>
            </div>

            <button type="submit" class="btn btn-success">Export to Excel</button>
        </form>
    </div>
}
else
{
    <p style="color: #9ca3af;">📭 No attendance records found for the selected filters.</p>
}

<!-- Session Controls -->
<div>
    <form asp-action="StartSession" method="post" style="display: inline;">
        <input type="hidden" name="subjectId" value="@ViewBag.SubjectId" />
        <button type="submit" id="startSessionBtn" class="btn btn-success">▶️ Start Session</button>
    </form>

    <form asp-action="EndSession" method="post" style="display: inline;">
        <input type="hidden" name="subjectId" value="@ViewBag.SubjectId" />
        <button type="submit" id="endSessionBtn" class="btn btn-danger">⏹️ End Session</button>
    </form>
</div>

<!-- Serial Console -->
<div id="serialConsole" class="serial-console">
    <h3>🖥️ Serial Console</h3>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/microsoft-signalr/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/arduinoHub")
            .build();

        // Start session button listener
        document.getElementById("startSessionBtn").addEventListener("click", function() {
            fetch("/Professor/StartSession", { method: "POST" })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        alert("Error: " + data.message);
                    }
                })
                .catch(err => console.error("Error starting session:", err));
        });

        // End session button listener
        document.getElementById("endSessionBtn").addEventListener("click", function() {
            fetch("/Professor/EndSession", { method: "POST" })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        alert("Error: " + data.message);
                    }
                })
                .catch(err => console.error("Error ending session:", err));
        });

        // SignalR connection for fingerprint sensor communication
        connection.on("ReceiveSerialLog", async function(message) {
            console.log("📥 Serial Message:", message);

            // Log the message in the serial console
            const logDiv = document.getElementById("serialConsole");
            const logEntry = document.createElement("div");
            logEntry.textContent = message;
            logDiv.appendChild(logEntry);
            logDiv.scrollTop = logDiv.scrollHeight;

            // Check if the Arduino fingerprint sensor is ready
            if (message.includes("ArduinoFingerPrintSensorReady")) {
                studentForm.style.display = "block";
                statusMessage.textContent = "✅ Fingerprint Sensor Connected!";
            }

            // Check if the message contains a fingerprint ID (e.g., "ID 1")
            const match = message.match(/Found ID #(\d+)/);
            if (match) {
                const fingerprintId = parseInt(match[1]); // Extract the fingerprint ID
                console.log("Detected Fingerprint ID:", fingerprintId);
                    const subjectId = @ViewBag.SubjectId; // Get the current subject ID from ViewBag
                    console.log("Subject Id: ",subjectId);


                try {
                    const subjectId = @ViewBag.SubjectId; // Get the current subject ID from ViewBag
                    const response = await fetch(`/Professor/VerifyFingerprint?fingerprintId=${fingerprintId}&subjectId=${subjectId}`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ fingerprintId, subjectId })
                    });

                    const result = await response.json();
                    if (result.success) {
                        alert("✅ Attendance marked successfully!");
                    } else {
                        alert("❌ Error: " + result.message);
                    }
                } catch (error) {
                    console.error("Error verifying fingerprint:", error);
                    alert("❌ Failed to verify fingerprint. Please try again.");
                }
            }
        });

        // Start SignalR connection
        connection.start().catch(err => console.error(err.toString()));
    </script>
}
